Parser Grammar
==============
< Program >     ::= < Program > < Statement > 
                    | < Statement >

< Statement >   ::= IDENTIFIER < Statement' > NEWLINE
                    | < Var-Decl > NEWLINE
                    | < Record-Def' >
                    | < Print > NEWLINE
                    | < Expression > NEWLINE

< Statement' >  ::= EQUAL < Expression > 
                    | < Record-Decl' >
                    | < Expression' >

< Var-Decl >    ::= < Type > < Identifier >
                    | < Type > LBRACKET < Bounds > RBRACKET IDENTIFIER
                    | < Record-Decl >

< Type >        ::= INTEGER | REAL 

< Record-Decl > ::= IDENTIFIER < Record-Decl' >

< Record-Decl' >::= IDENTIFIER
                    | LBRACKET < Bounds > RBRACKET IDENTIFIER

< Record-Def >  ::= RECORD < Identifier > NEWLINE < Fields > END

< Fields >      ::= < Fields > < Var-Decl > NEWLINE
                    | < Var-Decl > NEWLINE

< Bounds >      ::= < Bounds > COMMA INTLIT
                    | INTLIT

< Print >       ::= PRINT < Expression >

< Expression >  ::= < Term > < Expression' >

< Expression' > ::= PLUS < Term  > < Expression' >
                    | MINUS < Term > < Expression' >
                    | ""
                    
< Term >        ::= < Factor > < Term' >

< Term' >       ::= TIMES  < Factor > < Term' >
                    | DIVIDE < Factor > < Term' >
                    | ""

< Factor >      ::= < Base > POW < Factor >
                    | < Base >

< Base >        ::= LPAREN < Expression > RPAREN
                    | MINUS < Expression > 
                    | < Number >

< Number >      ::= INTLIT
                    | REALLIT
                    | < Ref >

< Index >       ::= < Index > COMMA < Expression >
                    | < Expression >

< Ref >         ::= IDENTIFIER < Ref' >

< Ref' >        ::= DOT < Ref >
                    | LBRACKET < Index > RBracket
                    | ""



Lexer Grammar
=============
NEWLINE     \n
PLUS        +
MINUS       -
TIMES       *
DIVIDE      /
POW         ^
LPAREN      (
RPAREN      )
INTLIT      [0-9]+
REALLIT     INTLINT.INTLIT
PRINT       print
IDENTIFIER  [a-zA-Z_][a-zA-Z0-9_]*
INTEGER     integer
REAL        real
EQUAL       =
RECORD      record
END         end
LBRACKET    [
RBRACKET    ]
COMMA       ,
DOT         .

